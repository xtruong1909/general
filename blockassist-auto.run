#!/bin/bash

# Script tự động cài đặt blockassist - Phiên bản không dùng hàm
set -e

# Màu sắc cho output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${GREEN}[INFO]${NC} Bắt đầu quá trình cài đặt blockassist..."
echo ""

# ==================== BƯỚC 1: KIỂM TRA VÀ CLONE REPO ====================
echo -e "${GREEN}[INFO]${NC} Bước 1: Kiểm tra repository blockassist..."

if [ -d "blockassist" ]; then
    echo -e "${YELLOW}[WARNING]${NC} Thư mục blockassist đã tồn tại, bỏ qua clone."
    cd blockassist
else
    echo -e "${GREEN}[INFO]${NC} Clone repository blockassist..."
    git clone https://github.com/hiepntnaa/blockassist
    cd blockassist
fi
cp -r data-train data
# ==================== BƯỚC 2: KIỂM TRA VÀ CÀI ĐẶT PYENV ====================
echo -e "${GREEN}[INFO]${NC} Bước 2: Kiểm tra pyenv..."

if command -v pyenv &> /dev/null; then
    echo -e "${YELLOW}[WARNING]${NC} pyenv đã được cài đặt, phiên bản: $(pyenv --version)"
else
    if [ -d "$HOME/.pyenv" ]; then
        echo -e "${YELLOW}[WARNING]${NC} Thư mục .pyenv đã tồn tại"
    else
        echo -e "${GREEN}[INFO]${NC} Clone pyenv repository..."
        git clone https://github.com/pyenv/pyenv.git ~/.pyenv
    fi
    
    echo -e "${GREEN}[INFO]${NC} Cấu hình pyenv trong bashrc..."
    
    if ! grep -q "# pyenv configuration" ~/.bashrc; then
        {
            echo ''
            echo '# pyenv configuration'
            echo 'export PYENV_ROOT="$HOME/.pyenv"'
            echo '[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"'
            echo 'eval "$(pyenv init --path)"'
            echo 'eval "$(pyenv init -)"'
        } >> ~/.bashrc
        echo -e "${GREEN}[INFO]${NC} Đã thêm cấu hình pyenv vào ~/.bashrc"
    else
        echo -e "${YELLOW}[WARNING]${NC} Cấu hình pyenv đã tồn tại trong ~/.bashrc"
    fi
    
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
    
    echo -e "${GREEN}[INFO]${NC} pyenv đã được cài đặt thành công!"
fi

# ==================== BƯỚC 3: KIỂM TRA VÀ CÀI ĐẶT PYTHON 3.10 ====================
echo -e "${GREEN}[INFO]${NC} Bước 3: Kiểm tra Python 3.10..."

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init --path)" 2>/dev/null || true
eval "$(pyenv init -)" 2>/dev/null || true

if pyenv versions | grep -q "3.10"; then
    echo -e "${YELLOW}[WARNING]${NC} Python 3.10 đã được cài đặt qua pyenv"
    pyenv global 3.10
else
    echo -e "${GREEN}[INFO]${NC} Cài đặt Python 3.10..."
    pyenv install 3.10
    pyenv global 3.10
    echo -e "${GREEN}[INFO]${NC} Python 3.10 đã được cài đặt thành công!"
fi

echo -e "${GREEN}[INFO]${NC} Phiên bản Python hiện tại: $(python --version)"

# ==================== BƯỚC 4: CHẠY SETUP.SH NẾU CÓ ====================
echo -e "${GREEN}[INFO]${NC} Bước 4: Kiểm tra setup.sh..."

if [ -f "setup.sh" ]; then
    if [ -x "setup.sh" ]; then
        echo -e "${GREEN}[INFO]${NC} Chạy setup.sh..."
        ./setup.sh
    else
        echo -e "${GREEN}[INFO]${NC} Cấp quyền thực thi cho setup.sh..."
        chmod +x setup.sh
        ./setup.sh
    fi
else
    echo -e "${YELLOW}[WARNING]${NC} Không tìm thấy setup.sh, bỏ qua bước này."
fi

# ==================== BƯỚC 5: KIỂM TRA VÀ CÀI ĐẶT THỨ VIỆN PYTHON ====================
echo -e "${GREEN}[INFO]${NC} Bước 5: Kiểm tra và cài đặt thư viện Python..."

if python -c "import psutil" 2>/dev/null; then
    echo -e "${YELLOW}[WARNING]${NC} Thư viện psutil đã được cài đặt"
else
    echo -e "${GREEN}[INFO]${NC} Cài đặt psutil..."
    pip install psutil
fi

if python -c "import readchar" 2>/dev/null; then
    echo -e "${YELLOW}[WARNING]${NC} Thư viện readchar đã được cài đặt"
else
    echo -e "${GREEN}[INFO]${NC} Cài đặt readchar..."
    pip install readchar
fi

echo -e "${GREEN}[INFO]${NC} Tất cả thư viện đã được cài đặt!"

# ==================== BƯỚC 6: TẠO FILE AUTO.RUN ====================
echo -e "${GREEN}[INFO]${NC} Bước 6: Tạo file auto.run..."

if [ -f "/root/blockassist/auto.run" ]; then
    echo -e "${YELLOW}[WARNING]${NC} File auto.run đã tồn tại, ghi đè..."
fi

cat > /root/blockassist/auto.run << 'AUTORUN_EOF'
#!/bin/bash
set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Function to print colored output
print_info() {
    local msg="${1-}"
    echo -e "${GREEN}[INFO]${NC} ${msg}"
}
print_error() {
    local msg="${1-}"
    echo -e "${RED}[ERROR]${NC} ${msg}"
}
print_warning() {
    local msg="${1-}"
    echo -e "${YELLOW}[WARNING]${NC} ${msg}"
}

# Define paths
TOKEN_FILE="/root/gensyn/huggingface.token"
BLOCKASSIST_DIR="/root/blockassist"
DEST_DIR="/root/blockassist/modal-login"
LOG_FILE="$BLOCKASSIST_DIR/LOG.log"
PROXY_LIST_FILE="${PROXY_LIST_FILE:-/root/gensyn/proxy.list}"
CURRENT_PROXY=""
CURRENT_IP=""

# Read proxy for index from CSV: "i,proxy_url" (proxy_url already in standard scheme://user:pass@host:port format)
load_proxy_for_index() {
  local idx="${1-}"
  local line proxy_url
  if [[ ! -f "$PROXY_LIST_FILE" ]]; then
    print_warning "Khong tim thay $PROXY_LIST_FILE -> chay khong proxy."
    echo ""; return 0
  fi
  line="$(awk -F',' -v i="$idx" '$0 !~ /^#/ && NF >= 2 {gsub(/^[ \t]+|[ \t]+$/, "", $1); if ($1 == i) {print $0; exit}}' "$PROXY_LIST_FILE")"
  if [[ -z "$line" ]]; then
    print_warning "Khong co proxy cho index $idx -> chay khong proxy."
    echo ""; return 0
  fi
  proxy_url="$(echo "$line" | cut -d',' -f2- | sed 's/^[ \t]*//; s/[ \t]*$//')"
  echo "$proxy_url"
}

setup_proxy() {
  local idx="${1-}"
  local proxy_url; proxy_url="$(load_proxy_for_index "$idx")"

  if [[ -z "$proxy_url" ]]; then
    CURRENT_PROXY=""
    CURRENT_IP="$(curl -4 -sS --max-time 12 --retry 2 ifconfig.me 2>/dev/null || echo unknown)"
    print_info "Index $idx: khong dung proxy, IP=$CURRENT_IP"
    return 0
  fi

  CURRENT_PROXY="$proxy_url"
  CURRENT_IP="$(curl -4 -sS --max-time 12 --retry 2 -x "$CURRENT_PROXY" ifconfig.me 2>/dev/null || echo unknown)"
  if [[ "$CURRENT_IP" == "unknown" ]]; then
    print_warning "Proxy $CURRENT_PROXY khong truy cap duoc ifconfig.me (kiem tra auth/whitelist)."
  fi
  print_info "Index $idx: dung PROXY=$CURRENT_PROXY -> PUBLIC_IP=$CURRENT_IP"
}

# Check if expect is installed
if ! command -v expect &> /dev/null; then
    apt-get update && apt-get install -y expect
fi

# Get total number of valid tokens (excluding empty lines and comments)
TOKENS=$(grep -vE '^\s*#|^\s*$' "$TOKEN_FILE")
NUM_LINES=$(echo "$TOKENS" | wc -l)

# Prompt for starting index with 5 second timeout
print_warning "Nhap so thu tu bat dau (1-$NUM_LINES) [Mac dinh: 1 sau 5 giay]:"
START_INDEX=""
if read -t 5 START_INDEX; then
    # Validate input
    if [[ ! "$START_INDEX" =~ ^[0-9]+$ ]] || [ "$START_INDEX" -lt 1 ] || [ "$START_INDEX" -gt "$NUM_LINES" ]; then
        print_warning "So khong hop le. Bat dau tu 1"
        START_INDEX=1
    else
        print_info "Bat dau tu so: $START_INDEX"
    fi
else
    print_warning "\nKhong co input. Bat dau tu 1"
    START_INDEX=1
fi

# Function to setup VPN
    local i="${1-}"
    local FOLDER_NAME=$i
    
    # Check if folder exists
        return 1
    fi
    
    
        return 1
    fi
    
    sleep 5
    ip=$(curl -4 ifconfig.me)
}

# Function to copy training data
copy_training_data() {
    local i="${1-}"
    local FOLDER_NAME=$i
    local SOURCE_DIR="/root/gensyn/$FOLDER_NAME/temp-data" 
    if [ ! -d "$SOURCE_DIR" ]; then
        print_error "Thu muc nguon k ton tai: $SOURCE_DIR"
        return 1
    fi
    # Copy data
    rm -rf "$DEST_DIR/temp-data"
    cp -r "$SOURCE_DIR"/ "$DEST_DIR/"
}

# Function to run training
run_training() {
    local i="${1-}"
    cd "$BLOCKASSIST_DIR"

    # Get token line i
    if [[ ! -f "$TOKEN_FILE" ]]; then
        print_error "File token k ton tai: $TOKEN_FILE"; return 1
    fi
    TOKEN="$(sed -n "${i}p" "$TOKEN_FILE" | sed 's/^[ \t]*//; s/[ \t]*$//')"
    if [[ -z "$TOKEN" || "$TOKEN" =~ ^# ]]; then
        print_error "Token dong $i khong hop le trong $TOKEN_FILE"; return 1
    fi

    EXPECT_SCRIPT="$(mktemp)"
    cat >"$EXPECT_SCRIPT" <<'EXP'
#!/usr/bin/expect -f
set timeout -1
spawn python run.py
expect {
  -re "(?i)token" {
    send -- "$env(HF_TOKEN)\r"
    exp_continue
  }
  "Too many requests" {
    sleep 180
    exp_continue
  }
  eof
}
EXP
    chmod +x "$EXPECT_SCRIPT"

    (
      # Remove any bypass that could skip proxy
      export NO_PROXY=""
      export no_proxy=""

      if [[ -n "$CURRENT_PROXY" ]]; then
        export HTTP_PROXY="$CURRENT_PROXY"
        export HTTPS_PROXY="$CURRENT_PROXY"
        export ALL_PROXY="$CURRENT_PROXY"
        export http_proxy="$CURRENT_PROXY"
        export https_proxy="$CURRENT_PROXY"
        export all_proxy="$CURRENT_PROXY"

        git config --global http.proxy "$CURRENT_PROXY" >/dev/null 2>&1 || true
        git config --global https.proxy "$CURRENT_PROXY" >/dev/null 2>&1 || true
      else
        unset HTTP_PROXY HTTPS_PROXY ALL_PROXY http_proxy https_proxy all_proxy
        git config --global --unset http.proxy >/dev/null 2>&1 || true
        git config --global --unset https.proxy >/dev/null 2>&1 || true
      fi

      # Log the IP visible to remote services from THIS process
      UPLOAD_VIA_IP="$(curl -4 -sS --max-time 12 --retry 2 ${CURRENT_PROXY:+-x "$CURRENT_PROXY"} ifconfig.me 2>/dev/null || echo unknown)"
      echo "RUN[i=$i] $(date -Is) USING_PROXY=${CURRENT_PROXY:-none} PUBLIC_IP=$UPLOAD_VIA_IP" | tee -a "$LOG_FILE"

      export HF_TOKEN="$TOKEN"
      cd "$BLOCKASSIST_DIR"
      "$EXPECT_SCRIPT" 2>&1 | tee -a "$LOG_FILE"
      RC=${PIPESTATUS[0]}

      echo "END[i=$i] $(date -Is) USING_PROXY=${CURRENT_PROXY:-none} PUBLIC_IP=$UPLOAD_VIA_IP rc=$RC" | tee -a "$LOG_FILE"
      exit $RC
    )
    rc=$?

    rm -f "$EXPECT_SCRIPT"
    if [[ $rc -ne 0 ]]; then
        print_error "Training loi voi i=$i (rc=$rc)"
        return $rc
    fi
    print_info "Hoan tat training cho i=$i"
}

# Function to process a range
process_range() {
    local start="${1-}"
    local end="${2-}"
    
    for i in $(seq "$start" "$end"); do
        FOLDER_NAME=$i
        TOKEN=$(echo "$TOKENS" | sed -n "${i}p")

        print_info "Xu ly folder $FOLDER_NAME (i = $i)"
        
        # Buoc 1: Setup VPN
        if ! setup_proxy "$i"; then
            print_error "Loi thiet lap proxy cho i = $i. Bo qua..."
            continue
        fi
        
        # Buoc 2: Copy training data
        if ! copy_training_data "$i"; then
            print_error "Loi copy data cho i = $i. Bo qua..."
            continue
        fi
        
        # Buoc 3: Run training
        if ! run_training "$i"; then
            print_error "Loi training cho i = $i. Tiep tuc voi folder tiep theo..."
            continue
        fi
        
        # Nghi ngau nhien tu 20–40 giay
        SLEEP_TIME=$((RANDOM % 21 + 20))
        echo "Sleep $SLEEP_TIME seconds" | tee -a "$LOG_FILE"
        sleep $SLEEP_TIME
    done
}

# Ghi log thoi gian bat dau
echo "Auto training session started at $(date) | Starting from index: $START_INDEX" | tee -a "$LOG_FILE"

# Chay tu START_INDEX den het
if [ "$START_INDEX" -le "$NUM_LINES" ]; then
    print_info "=== Chay tu $START_INDEX den $NUM_LINES ==="
    process_range "$START_INDEX" "$NUM_LINES"
fi

# Neu START_INDEX > 1, chay tu 1 den START_INDEX-1
if [ "$START_INDEX" -gt 1 ]; then
    print_info "=== Quay lai chay tu 1 den $((START_INDEX - 1)) ==="
    process_range 1 "$((START_INDEX - 1))"
fi

print_info "Hoan thanh tat ca! Xem logs: tail -f $LOG_FILE"
AUTORUN_EOF

chmod +x /root/blockassist/auto.run
echo -e "${GREEN}[INFO]${NC} File auto.run đã được tạo tại /root/blockassist/auto.run"

# ==================== HIỂN THỊ THÔNG TIN HOÀN TẤT ====================
echo ""
echo "=========================================="
echo -e "${GREEN}[INFO]${NC} CÀI ĐẶT HOÀN TẤT!"
echo "=========================================="
echo ""
echo -e "${GREEN}[INFO]${NC} Vị trí: $(pwd)"
echo -e "${GREEN}[INFO]${NC} Python version: $(python --version)"
echo -e "${GREEN}[INFO]${NC} Pyenv version: $(pyenv --version)"
echo ""
echo -e "${YELLOW}[WARNING]${NC} Lưu ý: Nếu đây là lần đầu cài đặt pyenv, hãy chạy:"
echo "  source ~/.bashrc"
echo "hoặc mở terminal mới để áp dụng cấu hình."
echo ""
