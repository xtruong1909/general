#!/bin/bash

# Script tự động cài đặt blockassist - BẢN DÙNG PROXY, KHÔNG OVPN
set -e

# Màu sắc cho output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${GREEN}[INFO]${NC} Bắt đầu quá trình cài đặt blockassist..."
echo ""

# ==================== BƯỚC 1: KIỂM TRA VÀ CLONE REPO ====================
echo -e "${GREEN}[INFO]${NC} Bước 1: Kiểm tra và clone repo blockassist (nếu chưa có)..."

if [ ! -d "/root/blockassist" ]; then
    echo -e "${GREEN}[INFO]${NC} Clone repo vào /root/blockassist"
    mkdir -p /root
    cd /root
    # Nếu bạn có repo cụ thể, thay dòng dưới bằng git clone thật
    # git clone https://github.com/<your>/blockassist.git
    # Tạo thư mục trống để minh hoạ
    mkdir -p /root/blockassist
else
    echo -e "${YELLOW}[WARNING]${NC} Thư mục /root/blockassist đã tồn tại, bỏ qua bước clone."
fi

cd /root/blockassist

# Đảm bảo có file run.py (demo). Bạn thay bằng run.py thật của dự án bạn.
if [ ! -f "run.py" ]; then
cat > run.py <<'PYEOF'
import os, sys, time
print("Blockassist demo run.py -- sẽ hỏi token để mô phỏng login/upload.")
try:
    token = input("Enter your token: ").strip()
except EOFError:
    token = os.environ.get("HF_TOKEN","")
print("Nhận token:", ("***" if token else "<trống>"))
# mô phỏng quá trình upload
print("Uploading to Hugging Face (demo)...")
time.sleep(2)
print("Done.")
PYEOF
fi

# ==================== BƯỚC 2: CÀI PYENV (NẾU CHƯA CÓ) ====================
echo -e "${GREEN}[INFO]${NC} Bước 2: Kiểm tra và cài pyenv (nếu chưa có)..."

if ! command -v pyenv >/dev/null 2>&1; then
    echo -e "${GREEN}[INFO]${NC} Cài đặt phụ thuộc cho pyenv..."
    apt-get update
    apt-get install -y --no-install-recommends \
        make build-essential libssl-dev zlib1g-dev libbz2-dev \
        libreadline-dev libsqlite3-dev curl llvm libncursesw5-dev \
        xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev ca-certificates git

    echo -e "${GREEN}[INFO]${NC} Cài đặt pyenv..."
    export HOME=/root
    export PATH="/root/.pyenv/bin:/root/.pyenv/shims:/root/.pyenv/plugins/python-build/bin:$PATH"
    if [ ! -d "/root/.pyenv" ]; then
        git clone https://github.com/pyenv/pyenv.git /root/.pyenv
    fi

    # Thiết lập shell init
    if ! grep -q 'pyenv init' /root/.bashrc 2>/dev/null; then
        {
            echo 'export PATH="/root/.pyenv/bin:$PATH"'
            echo 'eval "$(pyenv init -)"'
        } >> /root/.bashrc
    fi
    export PATH="/root/.pyenv/bin:$PATH"
    eval "$(pyenv init -)"

else
    echo -e "${GREEN}[INFO]${NC} pyenv đã được cài đặt."
    export PATH="/root/.pyenv/bin:$PATH"
    eval "$(pyenv init -)"
fi

# ==================== BƯỚC 3: CÀI PYTHON 3.10 QUA PYENV ====================
echo -e "${GREEN}[INFO]${NC} Bước 3: Cài/đặt Python 3.10 thông qua pyenv..."

if ! pyenv versions --bare | grep -q '^3\.10'; then
    echo -e "${GREEN}[INFO]${NC} Cài đặt Python 3.10..."
    pyenv install 3.10
    pyenv global 3.10
    echo -e "${GREEN}[INFO]${NC} Python 3.10 đã được cài đặt thành công!"
else
    pyenv global 3.10 || true
    echo -e "${GREEN}[INFO]${NC} Python 3.10 đã có sẵn."
fi

echo -e "${GREEN}[INFO]${NC} Phiên bản Python hiện tại: $(python --version)"

# ==================== BƯỚC 4: CHẠY SETUP.SH NẾU CÓ ====================
echo -e "${GREEN}[INFO]${NC} Bước 4: Kiểm tra setup.sh..."

if [ -f "setup.sh" ]; then
    if [ -x "setup.sh" ]; then
        echo -e "${GREEN}[INFO]${NC} Chạy setup.sh..."
        ./setup.sh
    else
        echo -e "${GREEN}[INFO]${NC} Cấp quyền thực thi cho setup.sh..."
        chmod +x setup.sh
        ./setup.sh
    fi
else
    echo -e "${YELLOW}[WARNING]${NC} Không tìm thấy setup.sh, bỏ qua bước này."
fi

# ==================== BƯỚC 5: CÀI THƯ VIỆN PYTHON CƠ BẢN ====================
echo -e "${GREEN}[INFO]${NC} Bước 5: Kiểm tra và cài đặt thư viện Python..."

python - <<'PIPCHK' || true
import sys, subprocess
def ensure(pkg):
    try:
        __import__(pkg)
    except Exception:
        subprocess.check_call([sys.executable, "-m", "pip", "install", pkg])
for m in ["psutil", "readchar"]:
    ensure(m)
PIPCHK

# ==================== BƯỚC 6: TẠO FILE auto.run (CHỈ DÙNG PROXY) ====================
echo -e "${GREEN}[INFO]${NC} Bước 6: Tạo file auto.run..."

if [ -f "/root/blockassist/auto.run" ]; then
    echo -e "${YELLOW}[WARNING]${NC} File auto.run đã tồn tại, ghi đè..."
fi

cat > /root/blockassist/auto.run << 'AUTORUN_EOF'
#!/bin/bash
set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Logging helpers
print_info()   { local msg="${1-}"; echo -e "${GREEN}[INFO]${NC} ${msg}"; }
print_error()  { local msg="${1-}"; echo -e "${RED}[ERROR]${NC} ${msg}"; }
print_warning(){ local msg="${1-}"; echo -e "${YELLOW}[WARNING]${NC} ${msg}"; }

# Define paths
TOKEN_FILE="/root/gensyn/huggingface.token"
BLOCKASSIST_DIR="/root/blockassist"
DEST_DIR="/root/blockassist/modal-login"
LOG_FILE="$BLOCKASSIST_DIR/LOG.log"
PROXY_LIST_FILE="${PROXY_LIST_FILE:-/root/gensyn/proxy.list}"

CURRENT_PROXY=""
CURRENT_IP=""

# Read proxy for index from CSV: "i,proxy_url"
# LƯU Ý: proxy_url phải ở dạng mà curl/git hiểu được (ví dụ: https://user:pass@IP:port hoặc socks5h://user:pass@IP:port)
load_proxy_for_index() {
  local idx="${1-}"
  local line proxy_url
  if [[ ! -f "$PROXY_LIST_FILE" ]]; then
    print_warning "Khong tim thay $PROXY_LIST_FILE -> chay khong proxy."
    echo ""; return 0
  fi
  line="$(awk -F',' -v i="$idx" '$0 !~ /^#/ && NF >= 2 {gsub(/^[ \t]+|[ \t]+$/, "", $1); if ($1 == i) {print $0; exit}}' "$PROXY_LIST_FILE")"
  if [[ -z "$line" ]]; then
    print_warning "Khong co proxy cho index $idx -> chay khong proxy."
    echo ""; return 0
  fi
  proxy_url="$(echo "$line" | cut -d',' -f2- | sed 's/^[ \t]*//; s/[ \t]*$//')"
  echo "$proxy_url"
}

# Setup per-index proxy and measure public IP via that proxy
setup_proxy() {
  local idx="${1-}"
  local proxy_url; proxy_url="$(load_proxy_for_index "$idx")"

  if [[ -z "$proxy_url" ]]; then
    CURRENT_PROXY=""
    CURRENT_IP="$(curl -4 -sS --max-time 12 --retry 2 ifconfig.me 2>/dev/null || echo unknown)"
    print_info "Index $idx: khong dung proxy, IP=$CURRENT_IP"
    return 0
  fi

  CURRENT_PROXY="$proxy_url"
  CURRENT_IP="$(curl -4 -sS --max-time 12 --retry 2 -x "$CURRENT_PROXY" ifconfig.me 2>/dev/null || echo unknown)"
  if [[ "$CURRENT_IP" == "unknown" ]]; then
    print_warning "Proxy $CURRENT_PROXY khong truy cap duoc ifconfig.me (kiem tra auth/whitelist)."
  fi
  print_info "Index $idx: dung PROXY=$CURRENT_PROXY -> PUBLIC_IP=$CURRENT_IP"
}

# Ensure expect is present
if ! command -v expect &> /dev/null; then
    apt-get update && apt-get install -y expect
fi

# Get tokens (strip blank & comments)
if [[ ! -f "$TOKEN_FILE" ]]; then
    print_error "Khong tim thay TOKEN_FILE: $TOKEN_FILE"
    exit 1
fi
TOKENS="$(grep -vE '^\s*#|^\s*$' "$TOKEN_FILE" || true)"
NUM_LINES="$(echo "$TOKENS" | wc -l)"
if [[ "$NUM_LINES" -eq 0 ]]; then
    print_error "TOKEN_FILE khong co token hop le."
    exit 1
fi

# Prompt start index (timeout 5s)
print_warning "Nhap so thu tu bat dau (1-$NUM_LINES) [Mac dinh: 1 sau 5 giay]:"
START_INDEX=""
if read -t 5 START_INDEX; then
    if [[ ! "$START_INDEX" =~ ^[0-9]+$ ]] || [ "$START_INDEX" -lt 1 ] || [ "$START_INDEX" -gt "$NUM_LINES" ]; then
        print_warning "So khong hop le. Bat dau tu 1"
        START_INDEX=1
    else
        print_info "Bat dau tu so: $START_INDEX"
    fi
else
    print_warning "\nKhong co input. Bat dau tu 1"
    START_INDEX=1
fi

# Function to copy training data
copy_training_data() {
    local i="${1-}"
    local FOLDER_NAME="$i"
    local SOURCE_DIR="/root/gensyn/$FOLDER_NAME/temp-data"
    if [[ ! -d "$SOURCE_DIR" ]]; then
        print_error "Thu muc nguon k ton tai: $SOURCE_DIR"
        return 1
    fi
    rm -rf "$DEST_DIR/temp-data"
    mkdir -p "$DEST_DIR"
    cp -r "$SOURCE_DIR"/ "$DEST_DIR/"
}

# Function to run training (per-process proxy)
run_training() {
    local i="${1-}"
    cd "$BLOCKASSIST_DIR"

    # Get token line i
    if [[ ! -f "$TOKEN_FILE" ]]; then
        print_error "File token k ton tai: $TOKEN_FILE"; return 1
    fi
    TOKEN="$(sed -n "${i}p" "$TOKEN_FILE" | sed 's/^[ \t]*//; s/[ \t]*$//')"
    if [[ -z "$TOKEN" || "$TOKEN" =~ ^# ]]; then
        print_error "Token dong $i khong hop le trong $TOKEN_FILE"; return 1
    fi

    # Expect script
    EXPECT_SCRIPT="$(mktemp)"
    cat >"$EXPECT_SCRIPT" <<'EXP'
#!/usr/bin/expect -f
set timeout -1
spawn python run.py
expect {
  -re "(?i)token" {
    send -- "$env(HF_TOKEN)\r"
    exp_continue
  }
  "Too many requests" {
    sleep 180
    exp_continue
  }
  eof
}
EXP
    chmod +x "$EXPECT_SCRIPT"

    (
      # Clear no_proxy to avoid bypass
      export NO_PROXY=""
      export no_proxy=""

      if [[ -n "$CURRENT_PROXY" ]]; then
        export HTTP_PROXY="$CURRENT_PROXY"
        export HTTPS_PROXY="$CURRENT_PROXY"
        export ALL_PROXY="$CURRENT_PROXY"
        export http_proxy="$CURRENT_PROXY"
        export https_proxy="$CURRENT_PROXY"
        export all_proxy="$CURRENT_PROXY"

        # In case git/git-lfs is used under the hood for HF operations
        git config --global http.proxy "$CURRENT_PROXY" >/dev/null 2>&1 || true
        git config --global https.proxy "$CURRENT_PROXY" >/dev/null 2>&1 || true
      else
        unset HTTP_PROXY HTTPS_PROXY ALL_PROXY http_proxy https_proxy all_proxy
        git config --global --unset http.proxy >/dev/null 2>&1 || true
        git config --global --unset https.proxy >/dev/null 2>&1 || true
      fi

      # Log public IP visible to this process
      UPLOAD_VIA_IP="$(curl -4 -sS --max-time 12 --retry 2 ${CURRENT_PROXY:+-x "$CURRENT_PROXY"} ifconfig.me 2>/dev/null || echo unknown)"
      echo "RUN[i=$i] $(date -Is) USING_PROXY=${CURRENT_PROXY:-none} PUBLIC_IP=$UPLOAD_VIA_IP" | tee -a "$LOG_FILE"

      export HF_TOKEN="$TOKEN"
      cd "$BLOCKASSIST_DIR"
      "$EXPECT_SCRIPT" 2>&1 | tee -a "$LOG_FILE"
      RC=${PIPESTATUS[0]}

      echo "END[i=$i] $(date -Is) USING_PROXY=${CURRENT_PROXY:-none} PUBLIC_IP=$UPLOAD_VIA_IP rc=$RC" | tee -a "$LOG_FILE"
      exit $RC
    )
    rc=$?

    rm -f "$EXPECT_SCRIPT"
    if [[ $rc -ne 0 ]]; then
        print_error "Training loi voi i=$i (rc=$rc)"
        return $rc
    fi
    print_info "Hoan tat training cho i=$i"
}

# Process a range [start..end]
process_range() {
    local start="${1-}"
    local end="${2-}"

    for i in $(seq "$start" "$end"); do
        local FOLDER_NAME="$i"
        local TOKEN_LINE
        TOKEN_LINE="$(echo "$TOKENS" | sed -n "${i}p")"

        print_info "Xu ly folder $FOLDER_NAME (i = $i)"

        # 1) Setup per-index proxy + log public IP
        if ! setup_proxy "$i"; then
            print_error "Loi thiet lap proxy cho i = $i. Bo qua..."
            continue
        fi

        # 2) Copy training data
        if ! copy_training_data "$i"; then
            print_error "Loi copy du lieu cho i = $i. Bo qua..."
            continue
        fi

        # 3) Run training (per-process proxy)
        if ! run_training "$i"; then
            print_error "Loi training cho i = $i. Tiep tuc voi folder tiep theo..."
            continue
        fi

        # Random sleep 20–40s
        SLEEP_TIME=$((RANDOM % 21 + 20))
        echo "Sleep $SLEEP_TIME seconds" | tee -a "$LOG_FILE"
        sleep $SLEEP_TIME
    done
}

# ===== MAIN =====
mkdir -p "$(dirname "$LOG_FILE")"
echo "Auto training session started at $(date) | Starting from index: $START_INDEX" | tee -a "$LOG_FILE"

# Run from START_INDEX..NUM_LINES then (if START_INDEX>1) 1..START_INDEX-1
if [[ "$START_INDEX" -le "$NUM_LINES" ]]; then
    print_info "=== Chay tu $START_INDEX den $NUM_LINES ==="
    process_range "$START_INDEX" "$NUM_LINES"
fi

if [[ "$START_INDEX" -gt 1 ]]; then
    print_info "=== Quay lai chay tu 1 den $((START_INDEX - 1)) ==="
    process_range 1 "$((START_INDEX - 1))"
fi

print_info "Tat ca hoan tat."
AUTORUN_EOF

chmod +x /root/blockassist/auto.run

# ==================== HIỂN THỊ THÔNG TIN HOÀN TẤT ====================
echo ""
echo "=========================================="
echo -e "${GREEN}[INFO]${NC} CÀI ĐẶT HOÀN TẤT!"
echo "=========================================="
echo ""
echo -e "${GREEN}[INFO]${NC} Vị trí: $(pwd)"
echo -e "${GREEN}[INFO]${NC} Python version: $(python --version)"
echo -e "${GREEN}[INFO]${NC} Pyenv version: $(pyenv --version)"
echo ""
echo -e "${YELLOW}[WARNING]${NC} Lưu ý: Nếu đây là lần đầu cài đặt pyenv, hãy chạy:"
echo "  source ~/.bashrc"
echo "hoặc mở terminal mới để áp dụng cấu hình."
echo ""
echo -e "${GREEN}[INFO]${NC} Để chạy autorun:"
echo "  cd /root/blockassist && ./auto.run"
echo ""
