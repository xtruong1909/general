#!/bin/bash
set -euo pipefail

# ========================================
# BlockAssist Auto Runner - PROXY VERSION
# ========================================
# Sử dụng HTTP Proxy thay vì OVPN
# - 30 proxy cho 150 ví, xoay vòng tự động
# - Nếu proxy lỗi, tự động thử proxy kế tiếp, tối đa 3 lần
# ========================================

# ====== Màu sắc ======
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_info()   { echo -e "${GREEN}[INFO]${NC} ${1-}"; }
print_error()  { echo -e "${RED}[ERROR]${NC} ${1-}"; }
print_warning(){ echo -e "${YELLOW}[WARNING]${NC} ${1-}"; }

# ====== Đường dẫn chính ======
USER_HOME="/home/$(logname)"
TOKEN_FILE="$USER_HOME/gensyn/huggingface.token"
PROXY_LIST_FILE="${PROXY_LIST_FILE:-$USER_HOME/gensyn/proxy.list}"

# các thư mục dự án chính vẫn ở /root/
BLOCKASSIST_DIR="/root/blockassist"
DEST_DIR="/root/blockassist/modal-login"
LOG_FILE="/root/blockassist/LOG.log"

# ====== Cấu hình pool proxy ======
PROXY_POOL_SIZE=${PROXY_POOL_SIZE:-30}     # 30 proxy cho 150 ví
MAX_PROXY_TRIES=${MAX_PROXY_TRIES:-3}      # thử tối đa 3 lần nếu lỗi

# ===================== HÀM XỬ LÝ PROXY =====================

# Load proxy entry cho 1 slot (1..PROXY_POOL_SIZE)
# File proxy dạng:  IP:PORT:USER:PASS  hoặc  INDEX,IP:PORT:USER:PASS
load_proxy_for_index() {
  local idx="$1"
  local line=""
  if [[ ! -f "$PROXY_LIST_FILE" ]]; then
    return 1
  fi

  # tìm dòng theo chỉ số (nếu có INDEX,)
  line="$(awk -F',' -v i=\"$idx\" '$0 !~ /^#/ && NF>=2 {gsub(/^[ \t]+|[ \t]+$/,"",$1); if($1==i){print $0; exit}}' \"$PROXY_LIST_FILE\")"
  if [[ -z "$line" ]]; then
    # fallback: lấy dòng thứ idx (bỏ comment)
    line="$(awk -v n=$idx 'BEGIN{c=0} $0 !~ /^#/ {c++; if(c==n){print $0; exit}}' \"$PROXY_LIST_FILE\")"
  fi

  if [[ -z "$line" ]]; then
    return 1
  fi

  # nếu có dấu phẩy thì cắt phần sau
  if [[ "$line" == *","* ]]; then
    line="$(echo "$line" | cut -d',' -f2- | sed 's/^[ \t]*//; s/[ \t]*$//')"
  fi

  # chuẩn hóa: http://user:pass@ip:port
  local proxy_url="$line"
  if [[ "$line" != http://* && "$line" != https://* ]]; then
    IFS=':' read -r ip port user pass <<< "$line" || true
    if [[ -n "$ip" && -n "$port" && -n "$user" && -n "$pass" ]]; then
      proxy_url="http://$user:$pass@$ip:$port"
    fi
  fi

  echo "$proxy_url"
  return 0
}

# Thiết lập proxy cho ví tương ứng (tự động xoay vòng, thử lại khi lỗi)
setup_proxy() {
  local idx="$1"
  CURRENT_PROXY=""
  CURRENT_IP="unknown"

  local pool_size="$PROXY_POOL_SIZE"
  local start_slot=$(( ((idx - 1) % pool_size) + 1 ))
  local tried=0
  local attempts=0

  while [ $tried -lt $pool_size ] && [ $attempts -lt $MAX_PROXY_TRIES ]; do
    local slot=$(( ((start_slot - 1 + tried) % pool_size) + 1 ))
    local proxy="$(load_proxy_for_index "$slot")" || proxy=""
    if [[ -z "$proxy" ]]; then
      tried=$((tried+1))
      continue
    fi

    CURRENT_PROXY="$proxy"
    local ip
    ip="$(curl -4 -sS --max-time 10 -x "$CURRENT_PROXY" ifconfig.me 2>/dev/null || echo unknown)"
    if [[ "$ip" != "unknown" && -n "$ip" ]]; then
      CURRENT_IP="$ip"
      print_info "Index $idx: sử dụng PROXY=$CURRENT_PROXY → PUBLIC_IP=$CURRENT_IP (slot $slot)"
      return 0
    else
      print_warning "Proxy slot $slot ($CURRENT_PROXY) lỗi → thử proxy kế tiếp (attempt $((attempts+1))/$MAX_PROXY_TRIES)"
      CURRENT_PROXY=""
      CURRENT_IP="unknown"
      tried=$((tried+1))
      attempts=$((attempts+1))
      sleep 1
      continue
    fi
  done

  CURRENT_PROXY=""
  CURRENT_IP="$(curl -4 -sS --max-time 12 --retry 2 ifconfig.me 2>/dev/null || echo unknown)"
  print_warning "Index $idx: tất cả proxy đều lỗi sau $attempts lần thử → fallback direct IP=$CURRENT_IP"
  return 0
}

# ===================== CHUẨN BỊ TOKEN & ENV =====================
if [[ ! -f "$TOKEN_FILE" ]]; then
  print_error "Không tìm thấy file TOKEN_FILE: $TOKEN_FILE"
  exit 1
fi

TOKENS="$(grep -vE '^\s*#|^\s*$' "$TOKEN_FILE" || true)"
NUM_LINES="$(echo "$TOKENS" | wc -l)"
if [[ "$NUM_LINES" -eq 0 ]]; then
  print_error "TOKEN_FILE không có token hợp lệ."
  exit 1
fi

# ===================== CHỌN INDEX BẮT ĐẦU =====================
print_warning "Nhập số thứ tự bắt đầu (1-$NUM_LINES) [mặc định: 1 sau 5s]:"
START_INDEX=""
if read -t 5 START_INDEX; then
  if [[ ! "$START_INDEX" =~ ^[0-9]+$ ]] || [ "$START_INDEX" -lt 1 ] || [ "$START_INDEX" -gt "$NUM_LINES" ]; then
    print_warning "Giá trị không hợp lệ. Bắt đầu từ 1."
    START_INDEX=1
  else
    print_info "Bắt đầu từ ví số $START_INDEX"
  fi
else
  print_warning "Không nhập, mặc định bắt đầu từ 1"
  START_INDEX=1
fi

# ===================== CÁC HÀM PHỤ TRỢ =====================
copy_training_data() {
  local i="$1"
  local SRC="$USER_HOME/gensyn/$i/temp-data"
  if [[ ! -d "$SRC" ]]; then
    print_error "Không có thư mục dữ liệu nguồn: $SRC"
    return 1
  fi
  rm -rf "$DEST_DIR/temp-data"
  mkdir -p "$DEST_DIR"
  cp -r "$SRC/" "$DEST_DIR/"
}

run_training() {
  local i="$1"
  local TOKEN
  TOKEN="$(sed -n "${i}p" "$TOKEN_FILE" | sed 's/^[ \t]*//; s/[ \t]*$//')"
  if [[ -z "$TOKEN" || "$TOKEN" =~ ^# ]]; then
    print_error "Token dòng $i không hợp lệ."
    return 1
  fi

  EXPECT_SCRIPT="$(mktemp)"
  cat >"$EXPECT_SCRIPT" <<'EXP'
#!/usr/bin/expect -f
set timeout -1
spawn python run.py
expect {
  -re "(?i)token" {
    send -- "$env(HF_TOKEN)\r"
    exp_continue
  }
  "Too many requests" {
    sleep 180
    exp_continue
  }
  eof
}
EXP
  chmod +x "$EXPECT_SCRIPT"

  (
    export HF_TOKEN="$TOKEN"
    export HTTP_PROXY="$CURRENT_PROXY"
    export HTTPS_PROXY="$CURRENT_PROXY"
    export ALL_PROXY="$CURRENT_PROXY"
    export http_proxy="$CURRENT_PROXY"
    export https_proxy="$CURRENT_PROXY"
    export all_proxy="$CURRENT_PROXY"

    git config --global http.proxy "$CURRENT_PROXY" >/dev/null 2>&1 || true
    git config --global https.proxy "$CURRENT_PROXY" >/dev/null 2>&1 || true

    UPLOAD_VIA_IP="$(curl -4 -sS --max-time 12 --retry 2 ${CURRENT_PROXY:+-x "$CURRENT_PROXY"} ifconfig.me 2>/dev/null || echo unknown)"
    echo "RUN[i=$i] $(date -Is) USING_PROXY=${CURRENT_PROXY:-none} PUBLIC_IP=$UPLOAD_VIA_IP" | tee -a "$LOG_FILE"

    cd "$BLOCKASSIST_DIR"
    "$EXPECT_SCRIPT" 2>&1 | tee -a "$LOG_FILE"
    RC=${PIPESTATUS[0]}

    echo "END[i=$i] $(date -Is) USING_PROXY=${CURRENT_PROXY:-none} PUBLIC_IP=$UPLOAD_VIA_IP rc=$RC" | tee -a "$LOG_FILE"
    exit $RC
  )
  local rc=$?
  rm -f "$EXPECT_SCRIPT"

  if [[ $rc -ne 0 ]]; then
    print_error "Training lỗi (rc=$rc)"
    return $rc
  fi
  print_info "Hoàn tất training cho ví $i"
}

# ===================== VÒNG XỬ LÝ =====================
process_range() {
  local start="$1"
  local end="$2"
  for i in $(seq "$start" "$end"); do
    print_info "========== Xử lý ví $i =========="
    setup_proxy "$i"
    copy_training_data "$i" || continue
    run_training "$i" || continue
    local SLEEP=$((RANDOM % 21 + 20))
    echo "Sleep $SLEEP giây..." | tee -a "$LOG_FILE"
    sleep $SLEEP
  done
}

# ===================== MAIN =====================
mkdir -p "$(dirname "$LOG_FILE")"
echo "=== Auto training bắt đầu lúc $(date) | Start index: $START_INDEX ===" | tee -a "$LOG_FILE"

if [[ "$START_INDEX" -le "$NUM_LINES" ]]; then
  process_range "$START_INDEX" "$NUM_LINES"
fi
if [[ "$START_INDEX" -gt 1 ]]; then
  process_range 1 "$((START_INDEX - 1))"
fi

print_info "Tất cả hoàn tất."
