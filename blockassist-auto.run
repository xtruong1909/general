#!/usr/bin/env bash
set -euo pipefail

# =====================[ GIỮ NGUYÊN THEO YÊU CẦU ]=====================
OVPN_SOURCE_DIR="/root/ovpn"
OVPN_DEST_PATH="/root/.ovpn.ovpn"
TOKEN_FILE="/root/gensyn/huggingface.token"
BLOCKASSIST_DIR="/root/blockassist"
DEST_DIR="/root/blockassist/modal-login"
LOG_FILE="$BLOCKASSIST_DIR/LOG.log"
# =====================================================================

# =====================[ CẤU HÌNH BỔ SUNG ]============================
VPN_UP_TIMEOUT="${VPN_UP_TIMEOUT:-30}"        # thời gian chờ VPN lên (giây)
IFACE="${IFACE:-tun0}"                        # tên interface VPN
KEEP_VPN_AFTER_JOB="${KEEP_VPN_AFTER_JOB:-false}"   # true: giữ kết nối sau mỗi job
REQUIRE_IP_DIFF="${REQUIRE_IP_DIFF:-true}"    # true: IP qua VPN phải khác IP gốc
EXPECT_IP_REGEX="${EXPECT_IP_REGEX:-}"        # nếu đặt, IP qua VPN phải khớp regex này (VD '^203\.0\.113\.')
CURL_OPTS="${CURL_OPTS:--4 -s}"               # curl mặc định IPv4, silent
RUN_PRIORITY=("auto.run" "run.py")            # ưu tiên runnable trong từng folder
# =====================================================================

timestamp() { date '+%Y-%m-%d %H:%M:%S%z'; }
log() { echo "[$(timestamp)] $*" | tee -a "$LOG_FILE"; }

require() {
  command -v "$1" >/dev/null 2>&1 || { log "[ERR] Thiếu lệnh bắt buộc: $1"; exit 1; }
}

ensure_env() {
  mkdir -p "$DEST_DIR" "$BLOCKASSIST_DIR"
  touch "$LOG_FILE" || { echo "[ERR] Không ghi được LOG_FILE: $LOG_FILE" >&2; exit 1; }
  require curl; require ip; require sed; require awk; require openvpn
}

kill_openvpn_clients() {
  pkill -f "openvpn --config" >/dev/null 2>&1 || true
  # dọn PID file nếu bạn có dùng --writepid ở nơi khác
}

copy_profile() {
  local src="$1"
  cp -f "$src" "$OVPN_DEST_PATH"
  chmod 600 "$OVPN_DEST_PATH"
  log "[VPN] Đã copy profile: $src -> $OVPN_DEST_PATH"
}

bringup_vpn() {
  local ovpn_path="$1"
  copy_profile "$ovpn_path"

  kill_openvpn_clients
  sleep 1

  # khởi động client ở background (daemon hóa bằng nohup để không lệ thuộc tty)
  nohup openvpn --config "$OVPN_DEST_PATH" --log /var/log/openvpn-client.log >/dev/null 2>&1 &
  log "[VPN] openvpn client started (log: /var/log/openvpn-client.log)"

  # chờ interface xuất hiện
  log "[VPN] Chờ interface $IFACE (tối đa ${VPN_UP_TIMEOUT}s)…"
  for _ in $(seq 1 "$VPN_UP_TIMEOUT"); do
    ip link show "$IFACE" >/dev/null 2>&1 && break
    sleep 1
  done
  ip link show "$IFACE" >/dev/null 2>&1 || { log "[ERR] $IFACE chưa xuất hiện sau ${VPN_UP_TIMEOUT}s"; return 2; }

  # kiểm tra default route qua IFACE
  local defline
  defline="$(ip route | sed -n '1p' || true)"
  if ! grep -q " dev ${IFACE}" <<<"$defline"; then
    log "[ERR] Default route chưa qua ${IFACE} (hiện tại: ${defline})"
    log "      → Cần server push: \"redirect-gateway def1 bypass-dhcp\""
    log "        hoặc thêm client-side: pull + redirect-gateway def1 autolocal"
    return 3
  fi

  # đo IP qua VPN (khách quan) và default
  IP_TUN="$(curl ${CURL_OPTS} --interface "$IFACE" https://ifconfig.me || true)"
  IP_DEF="$(curl ${CURL_OPTS} https://ifconfig.me || true)"
  log "[VPN] IP qua ${IFACE}: ${IP_TUN} ; IP default hiện tại: ${IP_DEF}"

  # tiêu chí đạt
  local ok_diff="yes" ok_regex="yes"
  if [[ "${REQUIRE_IP_DIFF}" == "true" ]]; then
    if [[ -z "${IP_BASE:-}" ]]; then
      log "[WARN] IP_BASE chưa thiết lập; bỏ qua so sánh khác-biệt."
    else
      if [[ -z "$IP_TUN" || "$IP_TUN" == "$IP_BASE" ]]; then
        ok_diff="no"
        log "[ERR] IP_TUN (${IP_TUN}) rỗng hoặc trùng IP gốc (${IP_BASE})"
      fi
    fi
  fi
  if [[ -n "$EXPECT_IP_REGEX" ]]; then
    if ! [[ "$IP_TUN" =~ $EXPECT_IP_REGEX ]]; then
      ok_regex="no"
      log "[ERR] IP_TUN (${IP_TUN}) không khớp EXPECT_IP_REGEX (${EXPECT_IP_REGEX})"
    fi
  fi

  if [[ "$ok_diff" != "yes" || "$ok_regex" != "yes" ]]; then
    log "[VPN] Tiêu chí KHÔNG đạt → bỏ qua job này."
    return 4
  fi

  log "[VPN] Tiêu chí ĐẠT. VPN sẵn sàng."
  return 0
}

teardown_vpn() {
  if [[ "${KEEP_VPN_AFTER_JOB}" == "true" ]]; then
    log "[VPN] Giữ kết nối theo cấu hình (KEEP_VPN_AFTER_JOB=true)."
    return 0
  fi
  kill_openvpn_clients
  log "[VPN] Đã tắt kết nối."
}

export_token_if_any() {
  if [[ -f "$TOKEN_FILE" ]]; then
    local tok; tok="$(tr -d '\r\n' < "$TOKEN_FILE")"
    if [[ -n "$tok" ]]; then
      export HF_TOKEN="$tok"
      export HUGGINGFACE_TOKEN="$tok"
      log "[TOK] Đã export HF_TOKEN từ $TOKEN_FILE"
    else
      log "[TOK] $TOKEN_FILE rỗng, bỏ qua export."
    fi
  else
    log "[TOK] Không tìm thấy TOKEN_FILE ($TOKEN_FILE), bỏ qua export."
  fi
}

pick_runnable_and_run() {
  local folder="$1"
  local cmd=""
  for candidate in "${RUN_PRIORITY[@]}"; do
    if [[ -x "$folder/$candidate" ]]; then
      cmd="./$candidate"
      break
    elif [[ -f "$folder/$candidate" && "$candidate" == "run.py" ]]; then
      cmd="python3 run.py"
      break
    fi
  done

  if [[ -z "$cmd" ]]; then
    log "[RUN] Không tìm thấy runnable trong $folder (auto.run/run.py). Bỏ qua."
    return 127
  fi

  ( cd "$folder" && log "[RUN] ($folder) $cmd" && eval "$cmd" )
}

main() {
  ensure_env
  export_token_if_any

  # ghi nhận IP gốc (trước VPN)
  IP_BASE="$(curl ${CURL_OPTS} https://ifconfig.me || true)"
  log "[BASE] IP gốc ban đầu: ${IP_BASE}"

  # duyệt qua từng profile .ovpn trong OVPN_SOURCE_DIR (mỗi profile map 1 folder)
  shopt -s nullglob
  mapfile -t profiles < <(ls -1 "${OVPN_SOURCE_DIR}"/*.ovpn 2>/dev/null | sort)
  if (( ${#profiles[@]} == 0 )); then
    log "[ERR] Không tìm thấy profile .ovpn nào trong ${OVPN_SOURCE_DIR}"
    exit 1
  fi

  for ovpn in "${profiles[@]}"; do
    base="$(basename "$ovpn" .ovpn)"
    job_folder="${BLOCKASSIST_DIR}/${base}"

    log "====================[ JOB: ${base} ]===================="
    log "[JOB] Profile: $ovpn"
    log "[JOB] Folder : $job_folder"

    if ! bringup_vpn "$ovpn"; then
      log "[JOB] Bỏ qua do VPN chưa đạt yêu cầu."
      continue
    fi

    if [[ -d "$job_folder" ]]; then
      # tạo thư mục đích nếu cần (bạn yêu cầu giữ DEST_DIR như cũ)
      mkdir -p "$DEST_DIR"
      # chạy job
      set +e
      pick_runnable_and_run "$job_folder"
      rc=$?
      set -e
      log "[JOB] Kết thúc với mã thoát: $rc"
    else
      log "[JOB] Thư mục không tồn tại: $job_folder → bỏ qua."
    fi

    teardown_vpn
  done

  log "[ALL DONE] Hoàn tất toàn bộ vòng lặp."
}

main "$@"
