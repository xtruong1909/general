#!/bin/bash
set -euo pipefail

LOGNAME=$(logname 2>/dev/null || true)
if [ -z "${LOGNAME:-}" ]; then
  LOGNAME="${SUDO_USER:-root}"
fi
if [ "$LOGNAME" = "root" ]; then
  USER_HOME="/root"
else
  USER_HOME="/home/$LOGNAME"
fi

mkdir -p "$USER_HOME/gensyn/run"

# ===================== SERVICE: rl-swarm =====================
cat << 'EOF' > /etc/systemd/system/rl-swarm.service
[Unit]
Description=RL Swarm Service
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
WorkingDirectory=/root/rl-swarm
ExecStart=/bin/bash -lc 'source /root/rl-swarm/.venv/bin/activate && ./run_rl_swarm.sh'
Restart=always
RestartSec=5
User=root
Environment=PYTHONUNBUFFERED=1
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

# ===================== SERVICE: rl-swarm2 =====================
cat << EOF > /etc/systemd/system/rl-swarm2.service
[Unit]
Description=Auto Run Gensyn Script
After=network-online.target
Wants=network-online.target

[Service]
User=root
WorkingDirectory=$USER_HOME
Environment=PATH=/usr/local/bin:/usr/bin:/bin:/root/.yarn/bin:/root/.config/yarn/global/node_modules/.bin
ExecStart=$USER_HOME/gensyn/run/auto.run
Restart=always
RestartSec=10
Environment=LOGNAME=$LOGNAME
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

# ===================== AUTO.RUN =====================
cat << 'AUTORUN_EOF' > "$USER_HOME/gensyn/run/auto.run"
#!/bin/bash
set -euo pipefail

BASE_DIR="$USER_HOME/gensyn/run"
TARGET_DIR="/root/rl-swarm"
LOGIN_SUBDIR="modal-login"
BOOTNODES_FILE="$BASE_DIR/bootnodes.txt"
CONFIG_FILE="$TARGET_DIR/rgym_exp/config/rg-swarm.yaml"

MAX_FOLDER=$(find "$BASE_DIR" -maxdepth 1 -type d -name '[0-9]*' -printf '%f\n' | sort -n | tail -1)
MAX_FOLDER=${MAX_FOLDER:-1}

update_bootnode() {
  if [ -f "$BOOTNODES_FILE" ]; then
    RANDOM_BOOTNODE=$(grep -v '^[[:space:]]*$' "$BOOTNODES_FILE" | shuf -n 1 || true)
    [ -z "$RANDOM_BOOTNODE" ] && return
    cp "$CONFIG_FILE" "$CONFIG_FILE.backup"
    sed -i "/^[[:space:]]*-[[:space:]]*'\/ip4/c\    - '$RANDOM_BOOTNODE'" "$CONFIG_FILE"
    echo "$(date) - Bootnode: $RANDOM_BOOTNODE"
  fi
}

copy_and_restart() {
  local idx="$1"
  local PEM_SOURCE="$BASE_DIR/$idx/swarm.pem"
  local TEMP_SOURCE="$BASE_DIR/$idx/temp-data"

  if [ ! -f "$PEM_SOURCE" ]; then echo "Thiếu $PEM_SOURCE"; return 1; fi
  if [ ! -d "$TEMP_SOURCE" ]; then echo "Thiếu $TEMP_SOURCE"; return 1; fi

  systemctl stop rl-swarm || true
  sleep 3

  rm -f "$TARGET_DIR/swarm.pem"
  cp -f "$PEM_SOURCE" "$TARGET_DIR/"

  mkdir -p "$TARGET_DIR/$LOGIN_SUBDIR/temp-data"
  # Giữ apikey.json nếu source không có
  if [ -f "$TARGET_DIR/$LOGIN_SUBDIR/temp-data/apikey.json" ] && [ ! -f "$TEMP_SOURCE/apikey.json" ]; then
    cp -f "$TARGET_DIR/$LOGIN_SUBDIR/temp-data/apikey.json" "$TEMP_SOURCE/" || true
  fi

  rsync -a "$TEMP_SOURCE/" "$TARGET_DIR/$LOGIN_SUBDIR/temp-data/" >/dev/null 2>&1 || \
    cp -a "$TEMP_SOURCE/." "$TARGET_DIR/$LOGIN_SUBDIR/temp-data/"

  update_bootnode
  systemctl start rl-swarm
}

echo "$(date) - Dùng folder 1"
copy_and_restart 1

CURRENT_INDEX=2
TIMEOUT_SECONDS=600
last_detect_time=$(date +%s)

while true; do
  LOG_LAST_30S=$(journalctl -u rl-swarm --since "30 seconds ago" -o cat 2>/dev/null || echo "")
  current_time=$(date +%s)

  if echo "$LOG_LAST_30S" | grep -q "Joining round"; then
    last_detect_time=$current_time
    (( CURRENT_INDEX > MAX_FOLDER )) && CURRENT_INDEX=1
    echo "$(date) - Phát hiện Joining round, copy & restart với folder $CURRENT_INDEX"
    copy_and_restart "$CURRENT_INDEX"
    ((CURRENT_INDEX++))
  elif (( current_time - last_detect_time >= TIMEOUT_SECONDS )); then
    (( CURRENT_INDEX > MAX_FOLDER )) && CURRENT_INDEX=1
    echo "$(date) - Không thấy Joining round 10 phút, restart folder $CURRENT_INDEX"
    copy_and_restart "$CURRENT_INDEX"
    ((CURRENT_INDEX++))
    last_detect_time=$current_time
  fi
  sleep 20
done
AUTORUN_EOF

sed -i "s|\$USER_HOME|$USER_HOME|g" "$USER_HOME/gensyn/run/auto.run"
chmod +x "$USER_HOME/gensyn/run/auto.run"

systemctl daemon-reload
echo "✅ auto.run đã được tạo với cơ chế giữ lại apikey.json."
